diff --git a/jni/win32/jni_md.h b/jni/win32/jni_md.h
index bbd0a609..e4af5924 100644
--- a/jni/win32/jni_md.h
+++ b/jni/win32/jni_md.h
@@ -38,8 +38,12 @@
 #ifndef _JNI_MD_H_
 #define _JNI_MD_H_
 
+#ifndef JNIEXPORT
 #define JNIEXPORT __declspec(dllexport)
+#endif
+#ifndef JNIIMPORT
 #define JNIIMPORT __declspec(dllimport)
+#endif
 #define JNICALL   __stdcall
 
 typedef long jint;
diff --git a/src/file/dirs_uwp.cpp b/src/file/dirs_uwp.cpp
new file mode 100644
index 00000000..878940fe
--- /dev/null
+++ b/src/file/dirs_uwp.cpp
@@ -0,0 +1,84 @@
+/*
+ * This file is part of libbluray
+ * Copyright (C) 2011  VideoLAN
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see
+ * <http://www.gnu.org/licenses/>.
+ */
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <windows.h>
+
+using namespace Platform;
+using namespace Windows::ApplicationModel;
+
+extern "C"
+{
+#include "dirs.h"
+
+    char *win32_get_font_dir(const char *font_file)
+    {
+        return NULL;
+    }
+
+    char *file_get_config_home(void)
+    {
+        return file_get_data_home();
+    }
+
+    char *file_get_data_home(void)
+    {
+        auto localFolder = Windows::Storage::ApplicationData::Current->LocalFolder;
+        int len = WideCharToMultiByte(CP_UTF8, 0, localFolder->Path->Data(), -1, NULL, 0, NULL, NULL);
+        char *appdir = (char *)malloc(len);
+        if (appdir) {
+            WideCharToMultiByte(CP_UTF8, 0, localFolder->Path->Data(), -1, appdir, len, NULL, NULL);
+        }
+        return appdir;
+    }
+
+    char *file_get_cache_home(void)
+    {
+        return file_get_data_home();
+    }
+
+    const char *file_get_config_system(const char *dir)
+    {
+        if (!dir) // first call
+            return file_get_data_home();
+
+        return NULL; // next call
+    }
+
+    char *file_get_install_dir(void)
+    {
+        try
+        {
+            String^ path = Package::Current->InstalledLocation->Path;
+            int len = WideCharToMultiByte(CP_UTF8, 0, path->Data(), -1, NULL, 0, NULL, NULL);
+            char *instdir = (char *)malloc(len);
+            if (instdir) {
+                WideCharToMultiByte(CP_UTF8, 0, path->Data(), -1, instdir, len, NULL, NULL);
+            }
+            return instdir;
+        }
+        catch (Exception^)
+        {
+            return NULL;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/file/dl_win32.c b/src/file/dl_win32.c
index 6155ad6a..a7e24757 100644
--- a/src/file/dl_win32.c
+++ b/src/file/dl_win32.c
@@ -77,6 +77,7 @@ void *dl_dlopen(const char *path, const char *version)
         return NULL;
     }
 
+#if !defined(WINAPI_FAMILY) || !(WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
 #if (_WIN32_WINNT < _WIN32_WINNT_WIN8)
     if (GetProcAddress(GetModuleHandle(TEXT("kernel32.dll")),
                        "SetDefaultDllDirectories") != NULL)
@@ -85,6 +86,9 @@ void *dl_dlopen(const char *path, const char *version)
                 LOAD_LIBRARY_SEARCH_SYSTEM32;
 
     result = LoadLibraryExW(wname, NULL, flags);
+#else
+    result = LoadPackagedLibrary(wname, 0);
+#endif
 
     if (!result) {
         char buf[128];
@@ -125,6 +129,7 @@ const char *dl_get_path(void)
     if (!initialized) {
         initialized = 1;
 
+#if !defined(WINAPI_FAMILY) || !(WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
         static char path[MAX_PATH];
         HMODULE hModule;
         wchar_t wpath[MAX_PATH];
@@ -142,6 +147,10 @@ const char *dl_get_path(void)
                 }
             }
         }
+#else
+        extern char *file_get_install_dir(void);
+        lib_path = file_get_install_dir();
+#endif
 
         if (lib_path) {
             /* cut library name from path */
diff --git a/src/libbluray/bdj/bdj.c b/src/libbluray/bdj/bdj.c
index 359bc8f1..3b612d86 100644
--- a/src/libbluray/bdj/bdj.c
+++ b/src/libbluray/bdj/bdj.c
@@ -49,6 +49,9 @@
 #ifdef _WIN32
 #include <windows.h>
 #include <winreg.h>
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#define getenv(x) NULL
+#endif
 #endif
 
 #ifdef HAVE_BDJ_J2ME
@@ -72,6 +75,9 @@ typedef jint (JNICALL * fptr_JNI_GetCreatedJavaVMs) (JavaVM **vmBuf, jsize bufLe
 #if defined(_WIN32) && !defined(HAVE_BDJ_J2ME)
 static void *_load_dll(const wchar_t *lib_path, const wchar_t *dll_search_path)
 {
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+    return NULL;
+#else
     void *result;
 
     typedef PVOID(WINAPI *AddDllDirectoryF)  (PCWSTR);
@@ -103,12 +109,16 @@ static void *_load_dll(const wchar_t *lib_path, const wchar_t *dll_search_path)
     }
 
     return result;
+#endif
 }
 #endif
 
 #if defined(_WIN32) && !defined(HAVE_BDJ_J2ME)
 static void *_load_jvm_win32(const char **p_java_home)
 {
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+    return NULL;
+#else
     static char java_home[256] = "";
 
     wchar_t buf_loc[4096] = L"SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
@@ -195,6 +205,7 @@ static void *_load_jvm_win32(const char **p_java_home)
     }
 
     return result;
+#endif
 }
 #endif
 
diff --git a/src/libbluray/bdj/native/java_awt_BDFontMetrics.c b/src/libbluray/bdj/native/java_awt_BDFontMetrics.c
index f0cd090a..71c51f54 100644
--- a/src/libbluray/bdj/native/java_awt_BDFontMetrics.c
+++ b/src/libbluray/bdj/native/java_awt_BDFontMetrics.c
@@ -38,7 +38,7 @@
 #include <fontconfig/fontconfig.h>
 #endif
 
-#if defined(_WIN32) && defined (HAVE_FT2)
+#if defined(_WIN32) && defined (HAVE_FT2) && !defined(HAVE_FONTCONFIG)
 #define NEED_WIN32_FONTS
 #endif
 
diff --git a/src/libbluray/bdnav/meta_parse.c b/src/libbluray/bdnav/meta_parse.c
index d45be33c..5a5a7ab6 100644
--- a/src/libbluray/bdnav/meta_parse.c
+++ b/src/libbluray/bdnav/meta_parse.c
@@ -44,6 +44,10 @@
 #include <libxml/parser.h>
 #include <libxml/xmlmemory.h>
 #include <libxml/tree.h>
+#endif
+
+#ifdef _WIN32
+#define strncasecmp _strnicmp
 #endif
 
 #define DEFAULT_LANGUAGE  "eng"
diff --git a/src/libbluray/bluray.c b/src/libbluray/bluray.c
index b3b55f75..04155b24 100644
--- a/src/libbluray/bluray.c
+++ b/src/libbluray/bluray.c
@@ -58,6 +58,12 @@
 #include <inttypes.h>
 #include <string.h>
 
+#ifdef _WIN32
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#define getenv(x) NULL
+#endif
+#endif
+
 
 typedef enum {
     title_undef = 0,
diff --git a/src/libbluray/disc/aacs.c b/src/libbluray/disc/aacs.c
index dce2c0b9..a7baf678 100644
--- a/src/libbluray/disc/aacs.c
+++ b/src/libbluray/disc/aacs.c
@@ -32,6 +32,12 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef _WIN32
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#define getenv(x) NULL
+#endif
+#endif
+
 
 struct bd_aacs {
     void           *h_libaacs;   /* library handle from dlopen */
diff --git a/src/libbluray/disc/bdplus.c b/src/libbluray/disc/bdplus.c
index fe624a98..1b7a4d8e 100644
--- a/src/libbluray/disc/bdplus.c
+++ b/src/libbluray/disc/bdplus.c
@@ -32,6 +32,12 @@
 #include <stdlib.h>
 #include <string.h>
 
+#ifdef _WIN32
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#define getenv(x) NULL
+#endif
+#endif
+
 
 struct bd_bdplus {
     void           *h_libbdplus; /* library handle from dlopen */
diff --git a/src/util/attributes.h b/src/util/attributes.h
index 1cc611c7..4e68d7b8 100644
--- a/src/util/attributes.h
+++ b/src/util/attributes.h
@@ -50,7 +50,7 @@
 #    define BD_PRIVATE
 #endif
 
-#if !defined(__GNUC__) || __GNUC__ < 3
+#if ( !defined(__GNUC__) || __GNUC__ < 3 ) && !defined(__INTEL_COMPILER)
 #  define BD_LIKELY(x)   (x)
 #  define BD_UNLIKELY(x) (x)
 #else
diff --git a/src/util/logging.c b/src/util/logging.c
index 64808720..68dbe005 100644
--- a/src/util/logging.c
+++ b/src/util/logging.c
@@ -31,6 +31,12 @@
 #include <stdarg.h>
 #include <string.h>
 
+#ifdef _WIN32
+#if defined(WINAPI_FAMILY) && (WINAPI_FAMILY==WINAPI_FAMILY_PC_APP || WINAPI_FAMILY==WINAPI_FAMILY_PHONE_APP)
+#define getenv(x) NULL
+#endif
+#endif
+
 uint32_t            debug_mask = (uint32_t)-1; /* set all bits to make sure bd_debug() is called for initialization */
 static BD_LOG_FUNC  log_func   = NULL;
 
